name: Deploy to Production

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run linting
        run: pnpm lint
        continue-on-error: true

      - name: Run type checking
        run: pnpm type-check
        continue-on-error: true

      - name: Run unit tests with coverage
        run: pnpm test:coverage

  e2e-test:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip e2e]') && !contains(github.event.head_commit.message, '[fast-deploy]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps chromium

      - name: Install Playwright dependencies only
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: pnpm exec playwright install-deps chromium

      - name: Run E2E tests
        run: pnpm exec playwright test
        env:
          DATABASE_URL_E2E: ${{ secrets.DATABASE_URL_E2E }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_DOMAIN: "http://localhost:3000"
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: [lint-and-test, e2e-test]
    if: always() && (needs.lint-and-test.result == 'success') && (needs.e2e-test.result == 'success' || needs.e2e-test.result == 'skipped')
    
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      NODE_ENV: production
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set lowercase image name
      run: echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:buildcache
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:buildcache,mode=max
        build-args: |
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_DOMAIN=${{ vars.NEXT_PUBLIC_DOMAIN }}
          NEXT_PUBLIC_GITHUB_CLIENT_ID=${{ vars.GH_CLIENT_ID }}
          NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ vars.GOOGLE_CLIENT_ID }}
          NEXT_PUBLIC_POSTHOG_KEY=${{ vars.NEXT_PUBLIC_POSTHOG_KEY }}
          NEXT_PUBLIC_POSTHOG_HOST=${{ vars.NEXT_PUBLIC_POSTHOG_HOST }}
          NODE_ENV=production
          
    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'
        
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: Save DigitalOcean kubeconfig with short-lived credentials
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ vars.DIGITALOCEAN_CLUSTER_NAME }}
        
    - name: Deploy with Helm
      run: |
        helm upgrade --install watchapi ./helm-chart \
          --namespace watchapi \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }} \
          --set image.tag=${{ github.sha }} \
          --set database.url="${{ secrets.DATABASE_URL }}" \
          --set nextPublicDomain="${{ vars.NEXT_PUBLIC_DOMAIN || 'https://watchapi.dev' }}" \
          --set jwtSecret="${{ secrets.JWT_SECRET }}" \
          --set oauth.google.clientId="${{ vars.GOOGLE_CLIENT_ID }}" \
          --set oauth.google.clientSecret="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
          --set oauth.github.clientId="${{ vars.GH_CLIENT_ID }}" \
          --set oauth.github.clientSecret="${{ secrets.GH_CLIENT_SECRET }}" \
          --set resend.apiKey="${{ secrets.RESEND_API_KEY }}" \
          --set posthog.key="${{ vars.NEXT_PUBLIC_POSTHOG_KEY }}" \
          --set posthog.host="${{ vars.NEXT_PUBLIC_POSTHOG_HOST }}" \
          --set enableCron="${{ vars.ENABLE_CRON || 'true' }}" \
          --wait --timeout=10m